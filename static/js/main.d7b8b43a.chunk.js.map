{"version":3,"sources":["Grid.jsx","constants.js","App.jsx","index.js"],"names":["Grid","_ref","grid","react_default","a","createElement","className","map","cells","row","key","cell","column","COLUMNS","ROWS","concat","DIRECTIONS","value","offsets","Array","fill","_","frames","slice","generate","push","directions","nextRow","nextColumn","filter","_ref2","sort","Math","random","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_ref4","err","return","visits","Map","getNext","_ref5","_ref6","_ref7","_ref8","Object","slicedToArray","has","queue","set","length","_queue$shift","shift","_queue$shift2","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_ref11","_ref10","search","path","_visits$get","get","_visits$get2","_step3","_iterator3","reverse","_iteratorNormalCompletion3","_ref14","_ref13","rootElement","document","getElementById","ReactDOM","render","_useState","useState","_useState2","index","setIndex","useEffect","timeout","setTimeout","max","min","clearTimeout"],"mappings":"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","file":"static/js/main.d7b8b43a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  ROWS,\r\n  COLUMNS,\r\n  UP,\r\n  RIGHT,\r\n  DOWN,\r\n  LEFT,\r\n  VISITED,\r\n  PATH\r\n} from \"./constants\";\r\n\r\nexport default ({ grid }) => (\r\n  <div className=\"grid\">\r\n    {grid.map((cells, row) => (\r\n      <div key={row} className=\"row\">\r\n        {cells.map((cell, column) => {\r\n          let className = \"cell\";\r\n          if (cell & UP || (row > 0 && grid[row - 1][column] & DOWN)) {\r\n            className += \" up\";\r\n          }\r\n          if (\r\n            cell & RIGHT ||\r\n            (column < COLUMNS - 1 && grid[row][column + 1] & LEFT)\r\n          ) {\r\n            className += \" right\";\r\n          }\r\n          if (cell & DOWN || (row < ROWS - 1 && grid[row + 1][column] & UP)) {\r\n            className += \" down\";\r\n          }\r\n          if (cell & LEFT || (column > 0 && grid[row][column - 1] & RIGHT)) {\r\n            className += \" left\";\r\n          }\r\n          if (cell & VISITED) {\r\n            className += \" visited\";\r\n          }\r\n          if (cell & PATH) {\r\n            className += \" path\";\r\n          }\r\n          return <div key={`${row},${column}`} className={className} />;\r\n        })}\r\n      </div>\r\n    ))}\r\n  </div>\r\n);\r\n","export const ROWS = 27;\r\nexport const COLUMNS = 48;\r\nexport const EMPTY = 0;\r\nexport const UP = 1;\r\nexport const RIGHT = 2;\r\nexport const DOWN = 4;\r\nexport const LEFT = 8;\r\nexport const FULL = 16;\r\nexport const VISITED = 32;\r\nexport const PATH = 64;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Grid from \"./Grid\";\r\nimport {\r\n  ROWS,\r\n  COLUMNS,\r\n  EMPTY,\r\n  UP,\r\n  RIGHT,\r\n  DOWN,\r\n  LEFT,\r\n  FULL,\r\n  VISITED,\r\n  PATH\r\n} from \"./constants\";\r\n\r\nconst DIRECTIONS = [\r\n  { value: UP, offsets: [-1, 0] },\r\n  { value: RIGHT, offsets: [0, 1] },\r\n  { value: DOWN, offsets: [1, 0] },\r\n  { value: LEFT, offsets: [0, -1] }\r\n];\r\n\r\nconst grid = new Array(ROWS).fill().map(_ => new Array(COLUMNS).fill(EMPTY));\r\nconst frames = [grid.map(row => row.slice())];\r\nconst generate = (row, column) => {\r\n  if (row === ROWS - 1 && column === COLUMNS - 1) {\r\n    grid[row][column] = FULL;\r\n    frames.push(grid.map(row => row.slice()));\r\n  } else {\r\n    const directions = DIRECTIONS.map(({ value, offsets }) => ({\r\n      value,\r\n      nextRow: row + offsets[0],\r\n      nextColumn: column + offsets[1]\r\n    }))\r\n      .filter(\r\n        ({ nextRow, nextColumn }) =>\r\n          nextRow >= 0 &&\r\n          nextRow < ROWS &&\r\n          nextColumn >= 0 &&\r\n          nextColumn < COLUMNS\r\n      )\r\n      .sort(() => Math.random() - 0.5);\r\n    for (const { value, nextRow, nextColumn } of directions) {\r\n      if (!grid[nextRow][nextColumn]) {\r\n        grid[row][column] |= value;\r\n        frames.push(grid.map(row => row.slice()));\r\n        generate(nextRow, nextColumn);\r\n      }\r\n    }\r\n    if (!grid[row][column]) {\r\n      grid[row][column] = FULL;\r\n      frames.push(grid.map(row => row.slice()));\r\n    }\r\n  }\r\n};\r\ngenerate(0, 0);\r\n\r\nconst visits = new Map();\r\nconst getNext = (row, column) => {\r\n  return DIRECTIONS.filter(({ value }) => grid[row][column] & value)\r\n    .map(({ offsets }) => [row + offsets[0], column + offsets[1]])\r\n    .filter(\r\n      ([row, column]) =>\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        column >= 0 &&\r\n        column < COLUMNS &&\r\n        !visits.has(`${row},${column}`)\r\n    );\r\n};\r\nconst search = (row, column) => {\r\n  const queue = [[row, column]];\r\n  grid[row][column] |= VISITED;\r\n  frames.push(grid.map(row => row.slice()));\r\n  visits.set(`${row},${column}`, [-1, -1]);\r\n  while (queue.length) {\r\n    const [row, column] = queue.shift();\r\n    for (const [nextRow, nextColumn] of getNext(row, column)) {\r\n      queue.push([nextRow, nextColumn]);\r\n      grid[nextRow][nextColumn] |= VISITED;\r\n      frames.push(grid.map(row => row.slice()));\r\n      visits.set(`${nextRow},${nextColumn}`, [row, column]);\r\n      if (nextRow === ROWS - 1 && nextColumn === COLUMNS - 1) {\r\n        return;\r\n      }\r\n    }\r\n  }\r\n};\r\nsearch(0, 0);\r\n\r\nlet path = [];\r\nfor (\r\n  let [row, column] = [ROWS - 1, COLUMNS - 1];\r\n  visits.has(`${row},${column}`);\r\n  [row, column] = visits.get(`${row},${column}`)\r\n) {\r\n  path.push([row, column]);\r\n}\r\nfor (const [row, column] of path.reverse()) {\r\n  grid[row][column] |= PATH;\r\n  frames.push(grid.map(row => row.slice()));\r\n}\r\n\r\nexport default () => {\r\n  const [index, setIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      setIndex(Math.max(0, Math.min(index + 2, frames.length - 1)));\r\n    }, 1000 / 60);\r\n    return () => clearTimeout(timeout);\r\n  }, [index]);\r\n\r\n  return <Grid grid={frames[index]} />;\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nimport \"./styles.css\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}